import java.awt.Point;
import javax.swing.JButton;
import javax.swing.JTextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.Timer;

public class PlinkoBoard extends javax.swing.JFrame implements ActionListener {
    int chip=1;
    int countTmr=0;
    int countBtn=0;
    int sideChooser;
    Random r =new Random();
    int money = 0;
    
    private static void Main(int x) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    /**
     * Creates new form PlinkoBoard
     */
    public PlinkoBoard() {
        //making point
        Point p=new Point();
        
        //making instruction text field
        JTextField txt=new JTextField();
        p.setLocation(20, 20);
        txt.setLocation(p);
        txt.setSize(200,40);
        add(txt);
        txt.setText("Press continue to start playing");
        
        //making answer text field
        JTextField ans=new JTextField();
        p.setLocation(20, 100);
        ans.setLocation(p);
        ans.setSize(200,40);
        add(ans);
        ans.setText("input answers here");
        
        //making chips counter
        JTextField chips=new JTextField();
        p.setLocation(20, 300);
        chips.setLocation(p);
        chips.setSize(200,40);
        add(chips);
        chips.setText("Chips: "+chip);
        
        //making money counter
        JTextField moneydisp=new JTextField();
        p.setLocation(20, 360);
        moneydisp.setLocation(p);
        moneydisp.setSize(200,40);
        add(moneydisp);
        moneydisp.setText("Money: "+money);
        
        //making next button
        JButton next=new JButton();
        p.setLocation(20, 150);
        next.setLocation(p);
        next.setSize(80, 40);
        next.setText("Continue");
        add(next);
        next.addActionListener(new ButtonListener(txt, ans, chips));
        
        //making ball
        JButton ball= new JButton();
        ball.setSize(20, 20);
        add(ball);
        ball.setVisible(false);
        
        //making timer
        Timer mytimer = new Timer(10, new TimerListener(ball, moneydisp,txt,ans,next));
        mytimer.setInitialDelay(2); 
        
        //making pegs
        JButton[] pegs = new JButton[90]; 
        for (int i=0; i<pegs.length; i++){
            pegs[i]= new JButton();
            if((i/9)%2==1){
            p.setLocation(300+60*(i%9), 60+40*(i/9));
            }
            else{ 
            p.setLocation(330+60*(i%9), 60+40*(i/9));  
            }
            pegs[i].setLocation(p);
            pegs[i].setSize(20, 20);
            add(pegs[i]);
        } 
        
        //making end buttons
        JButton[] endbtns = new JButton[9];
        for(int i=0;i<endbtns.length;i++){
            endbtns[i]= new JButton();
            p.setLocation(305+60*i, 440);
            endbtns[i].setLocation(p);
            endbtns[i].setSize(75, 20);
            add(endbtns[i]);
        }
        endbtns[0].setText("100");
        endbtns[1].setText("500");
        endbtns[2].setText("1000");
        endbtns[3].setText("0");
        endbtns[4].setText("10000");
        endbtns[5].setText("0");
        endbtns[6].setText("1000");
        endbtns[7].setText("500");
        endbtns[8].setText("100");  
        
        //making start buttons
        JButton[] startbtns = new JButton[9];
        for(int i=0;i<startbtns.length;i++){
            startbtns[i]= new JButton();
            p.setLocation(320+60*i, 30);
            startbtns[i].setLocation(p);
            startbtns[i].setSize(40, 20);
            add(startbtns[i]);
            startbtns[i].addActionListener(new BtnListener(txt, ans, chips, ball,p, mytimer,next));
        }
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 862, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlinkoBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlinkoBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlinkoBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlinkoBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PlinkoBoard().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println("hello");
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    
    
    
    
    
    class ButtonListener implements ActionListener {
        JTextField text, answer, chipcount;
        PlinkoMethods method= new PlinkoMethods();
        int ans;
  ButtonListener(JTextField txt, JTextField ans,JTextField chips) {
      text=txt;
      answer=ans;
      chipcount=chips;
  }
  public void actionPerformed(ActionEvent e) {
      JButton next=(JButton) e.getSource(); 
      if (countBtn<8){
      if (countBtn%2==0){
      next.setText("answer");
      answer.setText("answer here");
      ans=method.RandomQuestion(text);
      countBtn++;
      }
      else if (countBtn%2==1){
        chip= method.QuestionAnswer(chip, ans, answer, text);
        next.setText("Next");
        answer.setText("Press Next for next question");
        chipcount.setText("Chips: "+chip);
        countBtn++;
      }
      }
      else if(chip==0){
        int chip=1;
        int countTmr=0;
        int countBtn=0;
        int money = 0;
      }
      else{
          text.setText("Press one of the buttons at the top of the grid");
          answer.setText("at the top of the grid");
      }
  }
    }
    
    
    
    
    
    
    class BtnListener implements ActionListener {
        JTextField text, answer, chipcount;
        PlinkoMethods method= new PlinkoMethods();
        int x, ans, px,py;
        JButton balls, next;
        Point point;
        Timer time;
        
        
  BtnListener(JTextField txt, JTextField ans,JTextField chips, JButton ball, Point p, Timer mytimer, JButton cont) {
      text=txt;
      answer=ans;
      x=0;
      chipcount=chips;
      balls=ball;
      point=p;
      time =mytimer;
      next=cont;
  }
  public void actionPerformed(ActionEvent e) {
     // if(chip==0){
    //  }
    //  else if(countBtn<8){
      //}
      //else{
      System.out.println("inside " + px + " Y : " + py);
      JButton btn=(JButton) e.getSource();
      px=btn.getX();
      py=btn.getY();
      balls.setVisible(true);
      balls.setLocation(px+5,py);
      px=balls.getX();
      py=balls.getY();
      balls.setLocation(px+5,py+10);
      System.out.println("bottom " + px + " Y : " + py);
      Random r = new Random();
      sideChooser=r.nextInt(2);
      countTmr=0;
      chip--;
      chipcount.setText("Chips: " + chip);
      time.start();
      countTmr++;
     // }
      
}
    }
    
    
    
    
    
    
  class TimerListener implements ActionListener {
      int px, py;
      JButton balls, next;
      Random r = new Random();
      JTextField moneyDisp, text, answer;
  
    TimerListener(JButton ball, JTextField money,JTextField txt,JTextField ans,JButton cont){
        balls=ball;
        moneyDisp=money;
        text=txt;
        answer=ans;
        next=cont;
    }
    public void actionPerformed(ActionEvent e) {
        px=balls.getX();
        py=balls.getY();
        //if hit bottom
        if(py>=440){
            if(countTmr!=-1){
                //check money
             if(px==330|| px==810){
                money=money+100;
            }
            else if(px==390|| px==750){
                money=money+500;
            }
            else if(px==450|| px==690){
                money=money+1000;
            }
            else if(px==570){
                money=money+10000;
            }
            moneyDisp.setText("Money: "+money);
            }
            //if out of chips
            if(chip==0){
                text.setText("Sorry, you're out of chips");
                answer.setText("Press Retry to try again");
                next.setText("Retry");
            }
            countTmr=-1;
        }
        
        
        else{
        }
        //first drop
        if (countTmr>=0&&countTmr<6){
      balls.setLocation(px,py+1);
      countTmr++;
              }
        //check for if ball is at a limit
        else if (countTmr==6){
            if(px==810){
            sideChooser=1;
            }
            else if (px==300){
            sideChooser=0;
            }
            else{
            sideChooser=r.nextInt(2);            
            }
            countTmr++;
        }
        
        
        //ball goes right
        else if(sideChooser==0){
        if (countTmr>=7&&countTmr<14){
      balls.setLocation(px+2,py);
      countTmr++;  
        }
        else if (countTmr>=14&&countTmr<26){
      balls.setLocation(px+1,py+1);
      countTmr++;  
        }
        else if (countTmr>=26&&countTmr<30){
      balls.setLocation(px+1,py+2);
      countTmr++;  
        }
        else if (countTmr>=30&&countTmr<40){
      balls.setLocation(px,py+2);
      countTmr++;  
        }
        else if(countTmr==40){
            countTmr=6;
        }    
        }
        
        
        //ball goes left
        else if(sideChooser==1){
            if (countTmr>=7&&countTmr<14){
      balls.setLocation(px-2,py);
      countTmr++;  
        }
        else if (countTmr>=14&&countTmr<26){
      balls.setLocation(px-1,py+1);
      countTmr++;  
        }
        else if (countTmr>=26&&countTmr<30){
      balls.setLocation(px-1,py+2);
      countTmr++;  
        }
        else if (countTmr>=30&&countTmr<40){
      balls.setLocation(px,py+2);
      countTmr++;  
        }
        else if(countTmr==40){
            countTmr=6;
            sideChooser=r.nextInt(2);
        }
        }
     
    }
  }  
}
